<!-- views/chat.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">

  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Wordle</title>
  <link type="text/css" rel="stylesheet" href="/styles/wordleStyle.css">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet"/>
  <link
  rel="stylesheet"
  href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"
  />

</head>
<body>

  <h3>Players:</h3>

  <ul id="players">
    <% if (players && Array.isArray(players.players)) { %>
      <% players.players.forEach(player => { %>
        <li><%= player.username %></li>
      <% }); %>
    <% } %>
  </ul>
  <button class="returnToLobby" data-event="return to lobby">Return to lobby</button>
  <div>Lobby Code: <%= lobby %> </div>
  <Div>Username: <%= username %> </Div>
  <div id="wordDisplay"></div>

  <h1> Wordle </h1>
    
  <div id="game-board"></div>

  <div id="keyboard-cont">
    <div class="first-row">
        <button class="keyboard-button">q</button>
        <button class="keyboard-button">w</button>
        <button class="keyboard-button">e</button>
        <button class="keyboard-button">r</button>
        <button class="keyboard-button">t</button>
        <button class="keyboard-button">y</button>
        <button class="keyboard-button">u</button>
        <button class="keyboard-button">i</button>
        <button class="keyboard-button">o</button>
        <button class="keyboard-button">p</button>
    </div>
    <div class="second-row">
        <button class="keyboard-button">a</button>
        <button class="keyboard-button">s</button>
        <button class="keyboard-button">d</button>
        <button class="keyboard-button">f</button>
        <button class="keyboard-button">g</button>
        <button class="keyboard-button">h</button>
        <button class="keyboard-button">j</button>
        <button class="keyboard-button">k</button>
        <button class="keyboard-button">l</button>
    </div>
    <div class="third-row">
        <button class="keyboard-button">Del</button>
        <button class="keyboard-button">z</button>
        <button class="keyboard-button">x</button>
        <button class="keyboard-button">c</button>
        <button class="keyboard-button">v</button>
        <button class="keyboard-button">b</button>
        <button class="keyboard-button">n</button>
        <button class="keyboard-button">m</button>
        <button class="keyboard-button">Enter</button>
    </div>
  </div>



  <script src="/socket.io/socket.io.js"></script>
  <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
  <script
  integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4="
  crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>


  <script>



    function initBoard() {
    let board = document.getElementById("game-board");

    for (let i = 0; i < 6; i++) {
        let row = document.createElement("div")
        row.className = "letter-row"
        
        for (let j = 0; j < 5; j++) {
            let box = document.createElement("div")
            box.className = "letter-box"
            row.appendChild(box)
        }

        board.appendChild(row)
    }
    }

    initBoard()
    

    function shadeKeyBoard(letter, color) {
      for (const elem of document.getElementsByClassName("keyboard-button")) {
          if (elem.textContent === letter) {
              let oldColor = elem.style.backgroundColor
              if (oldColor === 'green') {
                  return
              } 

              if (oldColor === 'yellow' && color !== 'green') {
                  return
              }

              elem.style.backgroundColor = color
              break
          }
      }
    }

    document.getElementById("keyboard-cont").addEventListener("click", (e) => {
      const target = e.target
      
      if (!target.classList.contains("keyboard-button")) {
          return
      }
      let key = target.textContent

      if (key === "Del") {
          key = "Backspace"
      } 

      document.dispatchEvent(new KeyboardEvent("keyup", {'key': key}))
    })

    const animateCSS = (element, animation, prefix = 'animate__') =>
  // We create a Promise and return it
      new Promise((resolve, reject) => {
        const animationName = `${prefix}${animation}`;
        // const node = document.querySelector(element);
        const node = element
        node.style.setProperty('--animate-duration', '0.3s');
        
        node.classList.add(`${prefix}animated`, animationName);

        // When the animation ends, we clean the classes and resolve the Promise
        function handleAnimationEnd(event) {
          event.stopPropagation();
          node.classList.remove(`${prefix}animated`, animationName);
          resolve('Animation ended');
        }

        node.addEventListener('animationend', handleAnimationEnd, {once: true});
      });


    


    $(function () {
      
      const socket = io();

      socket.emit('generate word'); 



      socket.on('update word', function(word) {
        $('#wordDisplay').text(word);
      });



      document.addEventListener("keydown", (e) => {
          const pressedKey = e.key;
          console.log(pressedKey);
          socket.emit('letter input', { letter: pressedKey });
      });

      socket.on('add letter', function(info){
        let row = document.getElementsByClassName("letter-row")[6 - info.guessesRemaining];
        let box = row.children[info.nextLetter];
        animateCSS(box, "pulse")
        box.textContent = info.letter;
        box.classList.add("filled-box");
      });

      socket.on('delete letter', function(info){
        let row = document.getElementsByClassName("letter-row")[6 - info.guessesRemaining]
        let box = row.children[info.nextLetter - 1];
        box.textContent = "";
        box.classList.remove("filled-box");
      });

      socket.on('check guess', function(info){
        guessesRemaining = info.guessesRemaining;
        nextLetter = info.nextLetter;
        WORDS = info.WORDS;
        rightGuessString = info.rightGuess;

        let row = document.getElementsByClassName("letter-row")[6 - guessesRemaining]
        let guessString = info.currentWord;
        let currentGuess = Array.from(guessString);
        let rightGuess = Array.from(rightGuessString)
        console.log(guessString);

        if (guessString.length != 5) {
          toastr.error("Not enough letters!")
          return
        }

        if (!WORDS.includes(guessString)) {
          toastr.error("Word not in list!")
          return
        }


        for (let i = 0; i < 5; i++) {
          let letterColor = ''
          let box = row.children[i]
          let letter = currentGuess[i]
          
          let letterPosition = rightGuess.indexOf(currentGuess[i])
          // is letter in the correct guess
          if (letterPosition === -1) {
              letterColor = 'grey'
          } else {
              // now, letter is definitely in word
              // if letter index and right guess index are the same
              // letter is in the right position 
              if (currentGuess[i] === rightGuess[i]) {
                  // shade green 
                  letterColor = 'green'
              } else {
                  // shade box yellow
                  letterColor = 'yellow'
              }

              rightGuess[letterPosition] = "#"
          }

          let delay = 250 * i
          setTimeout(()=> {
              //shade box
              animateCSS(box, 'flipInX')
              box.style.backgroundColor = letterColor
              shadeKeyBoard(letter, letterColor)
          }, delay)
        }

      if (guessString === rightGuessString) {
          toastr.success("You guessed right! Game over!")
          guessesRemaining = 0
          socket.emit('game over');
          return
      } else {
          guessesRemaining -= 1;
          currentGuess = '';
          nextLetter = 0;
          
          info = {nextLetter, currentGuess, guessesRemaining}

          socket.emit('valid guess', info);

          if (guessesRemaining === 0) {
            toastr.error("You've run out of guesses! Game over!")
            toastr.info(`The right word was: "${rightGuessString}"`)
          }
        }


      });




      $('.returnToLobby').click(function() {
        // Emit a custom socket event when the button is clicked
        
        const eventName = $(this).data('event');
        console.log('RETURN TO LOBBY CLICKED');
        socket.emit('return to lobby', eventName);

      });


      socket.on('to lobby screen', function(data){
        console.log('RETURNING TO LOBBY');
        window.location.href = `/lobby/${data.lobbyCode}`;
      });
  
    });
  </script>
</body>
</html>
